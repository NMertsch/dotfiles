#!/bin/bash

# adapted from https://github.com/LukeSmithxyz/voidrice/blob/archi3/.local/bin/i3cmds/displayselect
# downloaded on 07.10.2019

# A UI for detecting and selecting all displays.
# Probes xrandr for connected displays and lets user select one to use.

auto() {
    if [ -n "$(autorandr | grep detected | tr -d '\n')" ]; then
        autorandr --change 2&>1 >/dev/null
    else
        _DISPLAYS=$(xrandr --query | grep " connected")
        _DISCONNECTED=$(xrandr --query | grep "disconnected" | cut -d" " -f1)
        _PRIMARY=$(printf "$_DISPLAYS" | grep primary | cut -d" " -f1)
        _SECONDARY=$(printf "$_DISPLAYS" | grep -v primary | cut -d" " -f1)

        disable_displays=""
        if [ -n "$(echo $_DISCONNECTED | sed 's/^[ \n]+//')" ]; then
            for _DISPLAY in $_DISCONNECTED; do
                disable_displays="$disable_displays --output $_DISPLAY --off"
            done
        fi

        if [ -z "$_PRIMARY" ]; then
            _PRIMARY=$(printf "$_SECONDARY" | head -n1)
            _SECONDARY=$(printf "$_SECONDARY" | sed "s/$_PRIMARY//" | sed "s/^[ \n]+//")
        fi

        if [ -z "$_SECONDARY" ]; then
            command="xrandr --output $_PRIMARY --auto --primary $disable_displays"
        else
            command="xrandr --output $_PRIMARY --auto --primary"
            _PREVIOUS=$_PRIMARY
            for _DISPLAY in $_SECONDARY; do
                command="$command --output $_DISPLAY --right-of $_PREVIOUS --auto"
                _PREVIOUS=$_SECONDARY
            done
            command="$command $disable_displays"
        fi

        $command
    fi
}

twoscreen() { # If multi-monitor is selected and there are two screens.

#    mirror=$(printf "no\\nyes" | dmenu -i -p "Mirror displays?")
#    [[ "$mirror" = "" ]] && exit 1
#    # Mirror displays using native resolution of external display and a scaled
#    # version for the internal display
#    if [ "$mirror" = "yes" ]; then
#        external=$(echo "$screens" | dmenu -i -p "Optimize resolution for")
#        [[ "$external" = "" ]] && exit 1
#        internal=$(echo "$screens" | grep -v "$external")
#
#        res_external=$(xrandr --query | sed -n "/^$external/,/\+/p" | \
#            tail -n 1 | awk '{print $1}')
#        res_internal=$(xrandr --query | sed -n "/^$internal/,/\+/p" | \
#            tail -n 1 | awk '{print $1}')
#
#        res_ext_x=$(echo $res_external | sed 's/x.*//')
#        res_ext_y=$(echo $res_external | sed 's/.*x//')
#        res_int_x=$(echo $res_internal | sed 's/x.*//')
#        res_int_y=$(echo $res_internal | sed 's/.*x//')
#
#        scale_x=$(echo "$res_ext_x / $res_int_x" | bc -l)
#        scale_y=$(echo "$res_ext_y / $res_int_y" | bc -l)
#
#        xrandr --output "$external" --primary --auto --scale 1.0x1.0 \
#            --output "$internal" --auto --same-as "$external" \
#            --scale "$scale_x"x"$scale_y"
#
#        polybar_monitor="$external"
#    else
        primary=$(echo "$screens" | dmenu -i -p "Select primary display")
        [[ "$primary" = "" ]] && exit 1
        secondary=$(echo "$screens" | grep -v "$primary")
        direction=$(printf "left\\nright" | dmenu -i -p "Extend $primary to which side?")
        [[ "$direction" = "" ]] && exit 1
        xrandr --output "$primary" --primary --auto --scale 1.0x1.0 --output "$secondary" --"$direction"-of "$primary" --auto --scale 1.0x1.0
#    fi
}

morescreen() { # If multi-monitor is selected and there are more than two screens.
	primary=$(echo "$screens" | dmenu -i -p "Select primary display")
	[[ "$primary" = "" ]] && exit 1
	secondary=$(echo "$screens" | grep -v "$primary" | dmenu -i -p "Select secondary display")
	[[ "$secondary" = "" ]] && exit 1
	direction=$(printf "right\\nleft" | dmenu -i -p "Extend $primary to which side?")
	[[ "$direction" = "" ]] && exit 1
	tertiary=$(echo "$screens" | grep -v "$primary" | grep -v "$secondary" | dmenu -i -p "Select third display")
	[[ "$tertiary" = "" ]] && exit 1
	xrandr --output "$primary" --auto --output "$secondary" --"$direction"-of "$primary" --auto --output "$tertiary" --"$(printf "left\\nright" | grep -v "$direction")"-of "$primary" --auto
}

multimon() { # Multi-monitor handler.
	case "$(echo "$screens" | wc -l)" in
		1) xrandr $(echo "$allposs" | grep -v "$screens" | awk '{print "--output", $1, "--off"}' | tr '\n' ' ') ;;
		2) twoscreen ;;
		*) morescreen ;;
	esac ;}


if [ "$1" = "--auto" ]; then
    auto
else
    # Get all possible displays
    allposs=$(xrandr -q | grep "connected")

    # Get all connected screens.
    screens=$(echo "$allposs" | grep " connected" | awk '{print $1}')

    # Get user choice including multi-monitor and manual selection:
    chosen=$(printf "manual setup\\nmanual setup (GUI)\\nsingle screen\\nsave current profile\\n" | dmenu -i -p "Select display arrangement")
    [[ "$chosen" = "" ]] && exit 1

    if [ "$chosen" = "single screen" ]; then
        screen=$(echo "$screens" | dmenu -i -p "Select display to use")
        al=$(echo "$allposs" | awk '{print $1}')
    	xrandr --output "$screen" --primary --auto $(echo "$al" | grep -v "^$screen\$" | awk '{print "--output", $1, "--off"}' | tr '\n' ' ')

    elif [ "$chosen" = "manual setup" ]; then
        if [[ $(echo "$screens" | wc -w) = "1" ]]; then
            notify-send "Only one display connected"
            exit
        fi
        multimon

    elif [ "$chosen" = "manual setup (GUI)" ]; then
        arandr

    elif [[ "$chosen" =~ " (saved profile)" ]]; then
        profile=$(echo "$chosen" | sed "s/ (saved profile)//")
        autorandr --load "$profile"

    elif [ "$chosen" = "save current profile" ]; then
        profile=$(dmenu -i -p "Give a name to the profile")
        [[ "$profile" = "" ]] && exit 1
        autorandr --save "$profile"
        exit

    else
        notify-send -u critical "Cannot handle '$chosen'"
        exit 1
    fi
fi

wallpaper-setter
pgrep -x dunst >/dev/null && killall dunst && setsid --fork dunst # Restart dunst to ensure proper location on screen
i3-msg restart >/dev/null
polybar-launch
